import pandas as pd
from openpyxl import load_workbook
from enum import IntEnum
from datetime import datetime


# ステータスコードの定義
class Status(IntEnum):
    NORMAL = 0  # 正常終了
    WARNING = 1  # 警告あり
    USER_ERROR = 2  # ユーザーエラー
    SYSTEM_ERROR = 9  # システムエラー


# グローバル変数の定義
input_df = None
filtered_df = None
debug_mode = True


def debug_print(message):
    """デバッグ情報を出力する関数"""
    if debug_mode:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[DEBUG {timestamp}] {message}")


class BaseExcelProcessor:
    """基本的なExcel処理を行う基底クラス"""

    def __init__(self, file_path, save_mode=True):
        """
        初期化
        Args:
            file_path (str): Excelファイルのパス
            save_mode (bool): 保存モードの有効/無効
        """
        self.file_path = file_path
        self.enable_save = save_mode
        self.status = Status.NORMAL
        self.available_sheets = []
        self._initialize()

    def _initialize(self):
        """初期化処理"""
        try:
            debug_print(f"=== 初期化開始 ===")
            debug_print(f"ファイルパス: {self.file_path}")
            debug_print(f"保存モード: {'有効' if self.enable_save else '無効'}")

            self.available_sheets = self._get_available_sheets()
            if not self.available_sheets:
                self.status = Status.USER_ERROR
                return

            debug_print(f"利用可能なシート: {self.available_sheets}")
            debug_print("初期化完了")

        except Exception as e:
            debug_print(f"初期化エラー: {str(e)}")
            self.status = Status.SYSTEM_ERROR

    def _get_available_sheets(self):
        """利用可能なシート名を取得"""
        try:
            book = load_workbook(self.file_path)
            return book.sheetnames
        except FileNotFoundError:
            debug_print("ファイルが見つかりません")
            self.status = Status.USER_ERROR
            return []
        except Exception as e:
            debug_print(f"シート一覧取得エラー: {str(e)}")
            self.status = Status.SYSTEM_ERROR
            return []

    def validate_sheet_name(self, sheet_name):
        """
        シート名の有効性を確認
        Args:
            sheet_name (str): 確認するシート名
        Returns:
            str or None: 有効なシート名または None
        """
        if sheet_name in self.available_sheets:
            return sheet_name

        debug_print(f"シート '{sheet_name}' が見つかりません")
        if self.available_sheets:
            default_sheet = self.available_sheets[0]
            debug_print(f"デフォルトシート '{default_sheet}' を使用します")
            self.status = Status.WARNING
            return default_sheet

        self.status = Status.USER_ERROR
        return None

    def save_to_excel(self, df, sheet_name):
        """
        データフレームをExcelに保存
        Args:
            df (DataFrame): 保存するデータフレーム
            sheet_name (str): 保存先シート名
        Returns:
            Status: 処理結果のステータス
        """
        if not self.enable_save:
            debug_print(f"保存モードが無効のため、{sheet_name}への保存をスキップします")
            return Status.NORMAL

        try:
            debug_print(f"\n=== {sheet_name}への保存開始 ===")

            # 既存のブックを読み込む
            book = load_workbook(self.file_path)

            # シートが存在する場合は削除
            if sheet_name in book.sheetnames:
                debug_print(f"既存の{sheet_name}シートを削除します")
                book.remove(book[sheet_name])
                book.save(self.file_path)

            # 新しいシートとして保存
            with pd.ExcelWriter(self.file_path, engine="openpyxl", mode="a") as writer:
                df.to_excel(writer, sheet_name=sheet_name, index=False)

            debug_print(f"{sheet_name}への保存が完了しました")
            return Status.NORMAL

        except Exception as e:
            debug_print(f"保存エラー: {str(e)}")
            return Status.SYSTEM_ERROR


class ToricoProcessor(BaseExcelProcessor):
    """TOROCO列の処理に特化したクラス"""

    def __init__(self, file_path, save_mode=True):
        """初期化"""
        super().__init__(file_path, save_mode)
        self.input_sheet = "input"
        self.output_sheet = "フィルタリング結果"

    def set_sheet_names(self, input_sheet=None, output_sheet=None):
        """
        シート名を設定
        Args:
            input_sheet (str): 入力シート名
            output_sheet (str): 出力シート名
        """
        if input_sheet:
            self.input_sheet = input_sheet
        if output_sheet:
            self.output_sheet = output_sheet

        debug_print(f"入力シート名: {self.input_sheet}")
        debug_print(f"出力シート名: {self.output_sheet}")

    def load_input_sheet(self, sheet_name=None):
        """
        入力シートの読み込み
        Args:
            sheet_name (str): 読み込むシート名（省略時はデフォルト）
        Returns:
            Status: 処理結果のステータス
        """
        global input_df
        try:
            sheet_to_load = sheet_name or self.input_sheet
            debug_print(f"\n=== {sheet_to_load}シートの読み込み開始 ===")

            # シート名の検証
            validated_sheet = self.validate_sheet_name(sheet_to_load)
            if not validated_sheet:
                debug_print("有効なシートが見つかりません")
                return Status.USER_ERROR

            # データ読み込み
            input_df = pd.read_excel(self.file_path, sheet_name=validated_sheet)

            # TOROCO列の確認
            if "TOROCO" not in input_df.columns:
                debug_print("警告: TOROCO列が見つかりません")
                return Status.USER_ERROR

            # データの確認と統計情報
            self._show_data_info()
            return Status.NORMAL

        except Exception as e:
            debug_print(f"読み込みエラー: {str(e)}")
            return Status.SYSTEM_ERROR

    def _show_data_info(self):
        """データ情報の表示"""
        if input_df is not None:
            debug_print(f"データ形状: {input_df.shape}")
            debug_print(f"列名一覧: {input_df.columns.tolist()}")
            debug_print(f"TOROCO列の空値数: {input_df['TOROCO'].isna().sum()}")
            debug_print(f"TOROCO列の値の種類: {input_df['TOROCO'].unique().tolist()}")

    def filter_toroco_data(self, output_sheet=None):
        """
        TOROCO列でフィルタリング
        Args:
            output_sheet (str): 出力先シート名（省略時はデフォルト）
        Returns:
            Status: 処理結果のステータス
        """
        global filtered_df
        try:
            debug_print("\n=== フィルタリング処理開始 ===")

            if input_df is None:
                debug_print("エラー: 入力データが読み込まれていません")
                return Status.USER_ERROR

            # フィルタリング実行
            filtered_df = input_df[input_df["TOROCO"].notna()].copy()

            # フィルタリング結果の確認
            if len(filtered_df) == 0:
                debug_print("警告: フィルタリング結果が0件です")
                return Status.WARNING

            # 結果の表示
            debug_print(f"フィルタリング結果:")
            debug_print(f"- 元のデータ数: {len(input_df)}行")
            debug_print(f"- フィルタリング後: {len(filtered_df)}行")
            debug_print(f"- 除外された行数: {len(input_df) - len(filtered_df)}行")

            # 保存処理
            if self.enable_save:
                save_sheet = output_sheet or self.output_sheet
                save_status = self.save_to_excel(filtered_df, save_sheet)
                if save_status != Status.NORMAL:
                    return save_status

            return Status.NORMAL

        except Exception as e:
            debug_print(f"フィルタリングエラー: {str(e)}")
            return Status.SYSTEM_ERROR


def get_status_message(status):
    """
    ステータスコードに対応するメッセージを取得
    Args:
        status (Status): ステータスコード
    Returns:
        str: ステータスメッセージ
    """
    messages = {
        Status.NORMAL: "正常に完了しました",
        Status.WARNING: "警告があります",
        Status.USER_ERROR: "ユーザーエラーが発生しました",
        Status.SYSTEM_ERROR: "システムエラーが発生しました",
    }
    return messages.get(status, "不明なステータスです")


def main():
    """メイン処理の実行"""
    file_path = r"C:\Users\yukik\Desktop\ex\0223_class\classtest0223_input.xlsx"

    try:
        # プロセッサーの作成（save_mode=Trueで保存有効）
        processor = ToricoProcessor(file_path, save_mode=True)

        # シート名の設定（省略可能）
        processor.set_sheet_names("input", "フィルタリング結果")

        # データの読み込み
        load_status = processor.load_input_sheet()
        debug_print(f"読み込み結果: {get_status_message(load_status)}")

        # 読み込みが正常またはワーニングの場合のみフィルタリング実行
        if load_status not in [Status.SYSTEM_ERROR, Status.USER_ERROR]:
            filter_status = processor.filter_toroco_data()
            debug_print(f"フィルタリング結果: {get_status_message(filter_status)}")

    except Exception as e:
        debug_print(f"予期せぬエラー: {str(e)}")
        return Status.SYSTEM_ERROR


if __name__ == "__main__":
    main()
    
#TORICONOフィルタリング継承で、ステータスNO追加
