import pandas as pd
from openpyxl import load_workbook

# グローバル変数の定義
input_df = None
filtered_df = None
debug_mode = True
enable_save = True  # 書き込みモードをTrueに設定（引数で変更可能）


def debug_print(message):
    """デバッグ情報を出力する関数"""
    if debug_mode:
        print(f"[DEBUG] {message}")


class ExcelProcessor:
    """Excelファイルの処理を行うクラス"""

    def __init__(self, file_path, save_mode=None):
        """
        初期化
        Args:
            file_path (str): Excelファイルのパス
            save_mode (bool): 保存モードの設定（Noneの場合はグローバル設定を使用）
        """
        self.file_path = file_path
        global enable_save
        if save_mode is not None:
            enable_save = save_mode
        debug_print(f"ファイルパスを設定: {file_path}")
        debug_print(f"保存モード: {'有効' if enable_save else '無効'}")
        debug_print("-" * 50)

    def save_to_excel(self, df, sheet_name):
        """Excelファイルに保存"""
        if not enable_save:
            debug_print(f"保存モードが無効のため、{sheet_name}への保存をスキップします")
            return True

        try:
            debug_print(f"\n=== {sheet_name}への保存開始 ===")

            # 既存のブックを読み込む
            book = load_workbook(self.file_path)

            # シートが存在する場合は削除
            if sheet_name in book.sheetnames:
                debug_print(f"既存の{sheet_name}シートを削除します")
                book.remove(book[sheet_name])

            book.save(self.file_path)

            # 新しいシートとして保存
            with pd.ExcelWriter(self.file_path, engine="openpyxl", mode="a") as writer:
                df.to_excel(writer, sheet_name=sheet_name, index=False)

            debug_print(f"{sheet_name}への保存が完了しました")
            return True

        except Exception as e:
            debug_print(f"保存エラー: {str(e)}")
            return False

    def load_input_sheet(self):
        """inputシートからデータを読み込む"""
        global input_df
        try:
            debug_print("\n=== データ読み込み開始 ===")
            input_df = pd.read_excel(self.file_path, sheet_name="input")

            debug_print(f"データ形状: {input_df.shape}")
            debug_print(f"列名一覧: {input_df.columns.tolist()}")

            if "TOROCO" not in input_df.columns:
                debug_print("警告: TOROCO列が見つかりません")
                return False

            self.analyze_toroco_stats()
            debug_print("\nデータ読み込み成功")
            return True

        except Exception as e:
            debug_print(f"読み込みエラー: {str(e)}")
            return False

    def filter_toroco_data(self):
        """TOROCO列の値が存在する行でフィルタリング"""
        global filtered_df
        try:
            debug_print("\n=== フィルタリング処理開始 ===")

            if input_df is None:
                debug_print("エラー: 入力データが読み込まれていません")
                return False

            # フィルタリング実行
            filtered_df = input_df[input_df["TOROCO"].notna()].copy()

            debug_print(f"フィルタリング結果: {len(filtered_df)}行")
            debug_print(f"除外された行数: {len(input_df) - len(filtered_df)}")

            # 保存処理（enable_saveがTrueの場合のみ実行）
            if enable_save:
                return self.save_to_excel(filtered_df, "フィルタリング結果")
            else:
                debug_print("保存モードが無効のため、書き込みは行いません")
                return True

        except Exception as e:
            debug_print(f"フィルタリングエラー: {str(e)}")
            return False

    def analyze_toroco_stats(self):
        """TOROCO列の統計情報を分析"""
        debug_print("\n=== TOROCO列の分析 ===")
        debug_print(f"空値の数: {input_df['TOROCO'].isna().sum()}")
        debug_print(f"ユニークな値の数: {input_df['TOROCO'].nunique()}")
        debug_print(f"ユニークな値: {input_df['TOROCO'].unique().tolist()}")

    def display_summary(self):
        """処理結果のサマリーを表示"""
        debug_print("\n=== 処理結果サマリー ===")
        debug_print(f"入力データ行数: {len(input_df)}")
        debug_print(f"フィルタリング後の行数: {len(filtered_df)}")
        debug_print(f"保存モード: {'有効' if enable_save else '無効'}")


def main():
    """メイン処理の実行"""
    file_path = r"C:\Users\yukik\Desktop\ex\0223_class\classtest0223_input.xlsx"

    # save_mode=True で書き込み有効、False で無効
    processor = ExcelProcessor(file_path, save_mode=True)

    try:
        if processor.load_input_sheet():
            if processor.filter_toroco_data():
                processor.display_summary()
                debug_print("全ての処理が正常に完了しました")
            else:
                debug_print("フィルタリング処理に失敗しました")
        else:
            debug_print("データ読み込みに失敗しました")

    except Exception as e:
        debug_print(f"予期せぬエラーが発生: {str(e)}")


if __name__ == "__main__":
    main()
#TORICOでフィルタリング＿書き込みONオフ
